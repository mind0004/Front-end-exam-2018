{"version":3,"sources":["scripts\\index.js"],"names":["chartCanvas","document","querySelector","timelineCheckBoxes","querySelectorAll","timelineLine","wasteChart","scrollPositionInterval","init","drawInitalChart","documentElement","log","getBoundingClientRect","setInterval","scrollPos","window","pageYOffset","scrollTop","top","height","length","animateTimeline","defaults","global","animation","duration","Chart","getContext","updateChart","data","datasets","borderColor","update","i","amountOfBoxesToFill","drawBox","checkBoxInterval","classList","add","style","transition","addEventListener"],"mappings":";AAKA,IAAMA,EAAcC,SAASC,cAAc,YACrCC,EAAqBF,SAASG,iBAClC,oCAEIC,EAAeJ,SAASC,cAAc,mCACxCI,OAAJ,EAAgBC,OAAhB,EAKA,SAASC,IAIPC,IACYR,SAASS,gBACbC,QAAAA,IAAIX,EAAYY,yBAECC,EAAAA,YAAY,WAC7BC,IAAAA,EAAYC,OAAOC,aAAef,SAASS,gBAAgBO,UAE/DH,EACAd,EAAYY,wBAAwBM,IAClClB,EAAYY,wBAAwBO,QACtC,IAMAL,EACAX,EAAmBA,EAAmBiB,OAAS,GAAGR,wBAC/CM,IACD,MAGFG,IACcd,cAAAA,KAEf,KAQL,SAASE,IACCE,QAAAA,IAAI,cACNW,MAAAA,SAASC,OAAOC,UAAUC,SAAW,IAC9B,EAAA,IAAIC,MAAM1B,EAAY2B,WAAW,MAAO,CACzC,SAAA,CACA,OAAA,CACK,UAAA,CACC,SAAA,OAIV,KAAA,OACA,KAAA,CACI,OAAA,CACN,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEQ,SAAA,CACR,CACQ,KAAA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9B,MAAA,uBACM,YAAA,gBACP,MAAA,GAER,CACQ,KAAA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9B,MAAA,oBACM,YAAA,gBACP,MAAA,KAIH,QAAA,CACM,aAAA,EACL,OAAA,CACC,MAAA,CACL,CACS,MAAA,CACA,IAAA,EACA,IAAA,MACK,SAAA,KAEA,WAAA,CACA,SAAA,MACD,SAAA,EACI,YAAA,sBACF,UAAA,QAEH,SAAA,QACC,UAAA,CACA,SAAA,EACF,MAAA,CAAC,oBAIP,MAAA,CACL,CACa,UAAA,CACA,SAAA,MAKP,SAAA,CACD,MAAA,CACG,OAAA,IAGC,YAAA,EACL,OAAA,CACE,OAAA,CACS,eAAA,EACN,QAAA,QAQnB,SAASC,IACCjB,QAAAA,IAAI,iBAEDkB,EAAAA,KAAKC,SAAS,GAAGC,YAAc,UAC/BF,EAAAA,KAAKC,SAAS,GAAGD,KAAO,CACjC,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,KAESA,EAAAA,KAAKC,SAAS,GAAGC,YAAc,UAC9BF,EAAAA,KAAKC,SAAS,GAAGD,KAAO,CAClC,EACA,EACA,GACA,IACA,KACA,KACA,IACA,IACA,KACA,IACA,MAEAvB,EAAW0B,SAIf,SAASX,IACCV,QAAAA,IAAI,oBACRsB,IAAAA,EAAI,EACFC,EAAsB,EAC5BC,IACMC,IAAAA,EAAmBvB,YAAYsB,EAAS,KAErCA,SAAAA,IACHF,EAAIC,EAEaD,EAAAA,GAAGI,UAAUC,IAAI,UAGtBF,cAAAA,KAEdH,EAGSM,EAAAA,MAAMC,WAAoBrC,OAAAA,EAAmBiB,OAA1D,IACamB,EAAAA,MAAMpB,OAAS,OArL9BlB,SAASwC,iBAAiB,mBAAoBjC","file":"scripts.3e17a4b5.map","sourceRoot":"..\\src","sourcesContent":["//Lars\r\n\r\n/* ==========================================================================\r\n   Global variables\r\n   ========================================================================== */\r\nconst chartCanvas = document.querySelector(\"#myChart\");\r\nconst timelineCheckBoxes = document.querySelectorAll(\r\n  \".research-state .timeline .check\"\r\n);\r\nconst timelineLine = document.querySelector(\".research-state .timeline .line\");\r\nlet wasteChart, scrollPositionInterval;\r\n/* ==========================================================================\r\n   Initialize\r\n   ========================================================================== */\r\ndocument.addEventListener(\"DOMContentLoaded\", init);\r\nfunction init() {\r\n  //do stuff after page has loaded\r\n\r\n  //Draw chart WITHOUT lines\r\n  drawInitalChart();\r\n  const doc = document.documentElement;\r\n  console.log(chartCanvas.getBoundingClientRect());\r\n  //Check if chart is visible on the screen, if yes, draw lines\r\n  scrollPositionInterval = setInterval(() => {\r\n    const scrollPos = window.pageYOffset || document.documentElement.scrollTop; //current scroll pos\r\n    if (\r\n      scrollPos >\r\n      chartCanvas.getBoundingClientRect().top +\r\n        chartCanvas.getBoundingClientRect().height\r\n    ) {\r\n      // chart is visible\r\n      updateChart(); //draw lines\r\n    }\r\n\r\n    if (\r\n      scrollPos >\r\n      timelineCheckBoxes[timelineCheckBoxes.length - 1].getBoundingClientRect()\r\n        .top +\r\n        550\r\n    ) {\r\n      //timeline is visible\r\n      animateTimeline();\r\n      clearInterval(scrollPositionInterval); //stop interval\r\n    }\r\n  }, 1000);\r\n}\r\n\r\n/* ==========================================================================\r\n   Functions\r\n   ========================================================================== */\r\n\r\n//Draw initial chart, but dont populate yet\r\nfunction drawInitalChart() {\r\n  console.log(\"drawcanvas\");\r\n  Chart.defaults.global.animation.duration = 3000; //Chart draw speed\r\n  wasteChart = new Chart(chartCanvas.getContext(\"2d\"), {\r\n    defaults: {\r\n      global: {\r\n        animation: {\r\n          duration: 7000\r\n        }\r\n      }\r\n    },\r\n    type: \"line\",\r\n    data: {\r\n      labels: [\r\n        \"1950\",\r\n        \"1960\",\r\n        \"1970\",\r\n        \"1980\",\r\n        \"1990\",\r\n        \"2000\",\r\n        \"2010\",\r\n        \"2020\",\r\n        \"2030\",\r\n        \"2040\",\r\n        \"2050\"\r\n      ],\r\n      datasets: [\r\n        {\r\n          data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          label: \"All plastic recycled\",\r\n          borderColor: \"rgba(0,0,0,0)\",\r\n          fill: false\r\n        },\r\n        {\r\n          data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          label: \"Plastic generated\",\r\n          borderColor: \"rgba(0,0,0,0)\",\r\n          fill: false\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      bezierCurve: true,\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              min: 0,\r\n              max: 28500,\r\n              stepSize: 5000\r\n            },\r\n            scaleLabel: {\r\n              position: \"top\",\r\n              display: true,\r\n              labelString: \"Million metric tons\",\r\n              fontStyle: \"bold\"\r\n            },\r\n            position: \"right\",\r\n            gridLines: {\r\n              display: true,\r\n              color: [\"rgba(0,0,0,0)\"]\r\n            }\r\n          }\r\n        ],\r\n        xAxes: [\r\n          {\r\n            gridLines: {\r\n              display: false\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      elements: {\r\n        point: {\r\n          radius: 0\r\n        }\r\n      },\r\n      aspectRatio: 1,\r\n      legend: {\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 10\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n//populate chart with data for visual drawing effects\r\nfunction updateChart() {\r\n  console.log(\"update canvas\");\r\n\r\n  wasteChart.data.datasets[0].borderColor = \"#3e95cd\";\r\n  wasteChart.data.datasets[0].data = [\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    50,\r\n    800,\r\n    2000,\r\n    5000,\r\n    8000\r\n  ];\r\n  wasteChart.data.datasets[1].borderColor = \"#8e5ea2\";\r\n  (wasteChart.data.datasets[1].data = [\r\n    0,\r\n    0,\r\n    50,\r\n    500,\r\n    1500,\r\n    2500,\r\n    5000,\r\n    8000,\r\n    13000,\r\n    20000,\r\n    26000\r\n  ]),\r\n    wasteChart.update();\r\n}\r\n\r\n//Animate timeline line and checkboxes\r\nfunction animateTimeline() {\r\n  console.log(\"Animate timeline\");\r\n  let i = 0;\r\n  const amountOfBoxesToFill = 3; //Amount of checkboxes to fill\r\n  drawBox();\r\n  const checkBoxInterval = setInterval(drawBox, 800);\r\n\r\n  function drawBox() {\r\n    if (i < amountOfBoxesToFill) {\r\n      //Fill next checkbox\r\n      timelineCheckBoxes[i].classList.add(\"active\");\r\n    } else {\r\n      //Stop checkbox filling\r\n      clearInterval(checkBoxInterval); //stop interval\r\n    }\r\n    ++i;\r\n  }\r\n\r\n  timelineLine.style.transition = `all ${timelineCheckBoxes.length}s`;\r\n  timelineLine.style.height = \"100%\";\r\n}\r\n"]}